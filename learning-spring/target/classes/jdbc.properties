############################################################
##################### C3P0连接池配置 #######################
############################################################

## mysql driver class
jdbc.driverClass=com.mysql.jdbc.Driver
##
jdbc.url=jdbc:mysql://localhost:3306/learning?characterEncoding=utf8&useSSL=false
## 数据库用户名
jdbc.user=root
## 数据库密码
jdbc.password=root
## 连接池中保留的最小连接数
jdbc.minPoolSize=5
## 连接池中保留的最大连接数 default 15
jdbc.maxPoolSize=10
## 初始化时获取的连接数,取值应该在minPoolSize与maxPoolSize之间。 default 3
jdbc.initialPoolSize=10
## 最大空闲时间60秒内未使用则连接被丢弃。若为0则永不丢弃,default 0
jdbc.maxIdleTime=60
## 当连接池中的连接耗尽时,c3p0一次同时获取的连接数,default 3
jdbc.acquireIncrement=5


 ######   配置PreparedStatement缓存 ############

## JDBC标准参数,用以控制数据源内夹在的PrepareStatement数量。但由于预缓存的statements属于单个connection
## 而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
## 如果 maxStatements与maxStatementsPerConnection均为0,则缓存被关闭。 Default 0
jdbc.maxStatements=0
#连接池为数据源单个Connection缓存的PreparedStatement数，这个配置比maxStatements更有意义，因为它缓存的服务对象是单个数据连接，
#如果设置的好，肯定是可以提高性能的。为0的时候不缓存。default : 0（看情况而论）
jdbc.maxStatementsPerConnection=30


## 每60秒检查所有连接池中的空闲连接,default 0
jdbc.idleConnectionTestPeriod=60


############   重连相关配置  ############

## 定义在数据库获取连接失败后重复尝试的次数,default 30
jdbc.acquireRetryAttempts=5
## 两次连接中间隔时间，单位毫秒，连接池在获得新连接时的间隔时间。default : 1000 单位ms（建议使用）
jdbc.acquireRetryDelay=1000
## 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留,并在下次调用getConnection（）时候
## 继续尝试获取连接。如果设置为true,那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。 default false
jdbc.breakAfterAcquireFailure=true
## 因性能消耗大,请只在需要时候使用它。如果设置为true,那么在每个connection提交的时候都将校验其有效性。
## 建议是哟给你idleConnectionTestPeriod或automatic TestTable等方法来提升连接测试的性能。default false
jdbc.testConnectionOnCheckout=false

## 配置当连接池所有连接用完时应用程序getConnection的等待时间。为0则无限等待直至有其他连接释放或者创建新的连接，
## 不为0则当时间到的时候如果仍没有获得连接，则会抛出SQLException。其实就是acquireRetryAttempts*acquireRetryDelay。
#default : 0（与上面两个，有重复，选择其中两个都行）
jdbc.checkoutTimeout=100

#其他
#autoCommitOnClose：连接池在回收数据库连接时是否自动提交事务。如果为false，则会回滚未提交的事务，如果为true，则会自动提交事务。default : false（不建议使用）
jdbc.autoCommitOnClose=false

#c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3
jdbc.numHelperThreads=10
